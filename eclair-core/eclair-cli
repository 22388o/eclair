#!/bin/bash

# default script values, can be overriden for convenience.
api_url='http://localhost:8081'
# api_password='your_api_password' # uncomment this if you don't want to provide a password each time you call eclair-cli
colors=false

# prints help message
usage() {
  echo -e "==============================
Command line client for eclair
==============================
This tool requires the eclair node's API to be enabled and listening
on <$api_url>.

Usage
-----
\e[93meclair-cli\e[39m [\e[93mOPTIONS\e[39m]... [\e[93mCOMMAND\e[39m] [--command-param command-value]...

where OPTIONS can be:
  -p <password>         API's password
  -a <address>          Override the API URL with <address>
  -c                    Outputs colored JSON

and COMMAND is one of:
  help, getinfo, connect, open, close, forceclose, updaterelayfee,
  peers, channels, channel, allnodes, allchannels, allupdates,
  receive, parseinvoice, findroute, findroutetonode,
  send, sendtonode, checkpayment,
  audit, networkfees, channelstats

Examples
--------
  eclair-cli help                           display available commands
  eclair-cli -a localhost:1234 peers        list the peers of a node hosted on localhost:1234
  eclair-cli close --channelId 006fb...     closes the channel with id 006fb...


Full documentation at: <https://github.com/ACINQ/eclair/wiki/Usage>" 1>&2; exit 1;
}

help() {
  echo -e "
  connect (uri): open a secure connection to a lightning node
  connect (nodeId, host, port): open a secure connection to a lightning node
  open (nodeId, fundingSatoshis, pushMsat = 0, feerateSatPerByte = ?, channelFlags = 0x01): open a channel with another lightning node, by default push = 0, feerate for the funding tx targets 6 blocks, and channel is announced
  updaterelayfee (channelId, feeBaseMsat, feeProportionalMillionths): update relay fee for payments going through this channel
  peers: list existing local peers
  channels: list existing local channels
  channels (nodeId): list existing local channels to a particular nodeId
  channel (channelId): retrieve detailed information about a given channel
  channelstats: retrieves statistics about channel usage (fees, number and average amount of payments)
  allnodes: list all known nodes
  allchannels: list all known channels
  allupdates: list all channels updates
  allupdates (nodeId): list all channels updates for this nodeId
  receive (amountMsat, description): generate a payment request for a given amount
  receive (amountMsat, description, expirySeconds): generate a payment request for a given amount with a description and a number of seconds till it expires
  parseinvoice (paymentRequest): returns node, amount and payment hash in a payment request
  findroute (paymentRequest): returns nodes and channels of the route if there is any
  findroute (paymentRequest, amountMsat): returns nodes and channels of the route if there is any
  findroute (nodeId, amountMsat): returns nodes and channels of the route if there is any
  send (amountMsat, paymentHash, nodeId): send a payment to a lightning node
  send (paymentRequest): send a payment to a lightning node using a BOLT11 payment request
  send (paymentRequest, amountMsat): send a payment to a lightning node using a BOLT11 payment request and a custom amount
  close (channelId): close a channel
  close (channelId, scriptPubKey): close a channel and send the funds to the given scriptPubKey
  forceclose (channelId): force-close a channel by publishing the local commitment tx (careful: this is more expensive than a regular close and will incur a delay before funds are spendable)
  checkpayment (paymentHash): returns true if the payment has been received, false otherwise
  checkpayment (paymentRequest): returns true if the payment has been received, false otherwise
  audit: list all send/received/relayed payments
  audit (from, to): list send/received/relayed payments in that interval (from <= timestamp < to)
  networkfees: list all network fees paid to the miners, by transaction
  networkfees (from, to): list network fees paid to the miners, by transaction, in that interval (from <= timestamp < to)
  getinfo: returns info about the blockchain and this node
  help: display this message
  ";
}

# -- script's logic begins here

# Check if jq is installed. If not, display instructions and abort program
command -v jq >/dev/null 2>&1 || { echo -e "This tool requires jq.\nFor installation instructions, visit https://stedolan.github.io/jq/download/.\n\nAborting..."; exit 1; }

# curl installed? If not, give a hint
command -v curl >/dev/null 2>&1 || { echo -e "This tool requires curl.\n\nAborting..."; exit 1; }

# extract script options
while getopts ':cu:p:a:' flag; do
  case "${flag}" in
    p) api_password="${OPTARG}" ;;
    a) api_url="${OPTARG}" ;;
    c) colors=true ;;
    *) ;;
  esac
done
shift $(($OPTIND - 1))

# extract api's endpoint (e.g. sendpayment, connect, ...) from params
api_endpoint=${1}
shift 1

# display a usage method if no method given
if [ -z $api_endpoint ]; then
  usage;
  exit 0;
fi

# display a help and exit
if [ "$api_endpoint" == "help" ]; then
  help;
  exit 0;
fi

# transform long options into a HTTP encoded url body.
api_payload=""
index=1
for arg in "${@}"; do
  transformed_arg=""
  case ${arg} in
    "--"*)
            # if arg begins with two dashes, it is the name of a parameter. Dashes must be removed, and arg must be followed by an equal sign
            # also, it must be prefixed by an '&' sign, if it is not the first argument
            if [ $index -eq 1 ];
              then transformed_arg="$transformed_arg${arg:2}="
              else transformed_arg="&$transformed_arg${arg:2}="
            fi
            ;;
    *)
            transformed_arg=$arg
            ;;
  esac
  api_payload="$api_payload$transformed_arg";
  let "index++"
done;

# jq parses response body for error message
jq_filter='if .error == null then . else .error end'

# jq options
if [ "$colors" = true ]; then
  jq_opts="--color-output";
else
  jq_opts="--monochrome-output"
fi

# if no password is provided, auth should only contain user login so that curl prompts for the api password
if [ -z $api_password ]; then
  auth="eclair-cli";
else
  auth="eclair-cli:$api_password";
fi

# we're now ready to execute the API call
eval curl "--user $auth --silent --show-error -X POST -H \"Content-Type: application/x-www-form-urlencoded\" -d '$api_payload' $api_url/$api_endpoint" | jq -r "$jq_opts" "$jq_filter"
