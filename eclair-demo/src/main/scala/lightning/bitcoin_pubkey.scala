// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class bitcoin_pubkey(
    key: com.google.protobuf.ByteString
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[bitcoin_pubkey] with com.trueaccord.lenses.Updatable[bitcoin_pubkey] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeBytesSize(1, key)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeBytes(1, key)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.bitcoin_pubkey = {
      var __key = this.key
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __key = __input.readBytes()
          case tag => __input.skipField(tag)
        }
      }
      lightning.bitcoin_pubkey(
          key = __key
      )
    }
    def withKey(__v: com.google.protobuf.ByteString): bitcoin_pubkey = copy(key = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => key
      }
    }
    def companion = lightning.bitcoin_pubkey
}

object bitcoin_pubkey extends com.trueaccord.scalapb.GeneratedMessageCompanion[bitcoin_pubkey]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[bitcoin_pubkey]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.bitcoin_pubkey = lightning.bitcoin_pubkey(
    key = fieldsMap(1).asInstanceOf[com.google.protobuf.ByteString]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("bitcoin_pubkey", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.bitcoin_pubkey"))
  lazy val defaultInstance = lightning.bitcoin_pubkey(
    key = com.google.protobuf.ByteString.copyFrom(Array[Byte]())
  )
  implicit class bitcoin_pubkeyLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, bitcoin_pubkey]) extends com.trueaccord.lenses.ObjectLens[UpperPB, bitcoin_pubkey](_l) {
    def key: com.trueaccord.lenses.Lens[UpperPB, com.google.protobuf.ByteString] = field(_.key)((c_, f_) => c_.copy(key = f_))
  }
  final val KEY_FIELD_NUMBER = 1
}
