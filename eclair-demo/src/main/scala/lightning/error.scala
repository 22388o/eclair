// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class error(
    problem: Option[String] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[error] with com.trueaccord.lenses.Updatable[error] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (problem.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeStringSize(1, problem.get) }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      problem.foreach { v => 
        output.writeString(1, v)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.error = {
      var __problem = this.problem
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __problem = Some(__input.readString())
          case tag => __input.skipField(tag)
        }
      }
      lightning.error(
          problem = __problem
      )
    }
    def getProblem: String = problem.getOrElse("")
    def clearProblem: error = copy(problem = None)
    def withProblem(__v: String): error = copy(problem = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => problem
      }
    }
    def companion = lightning.error
}

object error extends com.trueaccord.scalapb.GeneratedMessageCompanion[error]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[error]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.error = lightning.error(
    problem = fieldsMap.getOrElse(1, None).asInstanceOf[Option[String]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("error", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.error"))
  lazy val defaultInstance = lightning.error(
  )
  implicit class errorLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, error]) extends com.trueaccord.lenses.ObjectLens[UpperPB, error](_l) {
    def problem: com.trueaccord.lenses.Lens[UpperPB, String] = field(_.getProblem)((c_, f_) => c_.copy(problem = Some(f_)))
    def optionalProblem: com.trueaccord.lenses.Lens[UpperPB, Option[String]] = field(_.problem)((c_, f_) => c_.copy(problem = f_))
  }
  final val PROBLEM_FIELD_NUMBER = 1
}
