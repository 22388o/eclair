// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class open_anchor(
    txid: lightning.sha256_hash,
    outputIndex: Int,
    amount: Long,
    commitSig: lightning.signature
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[open_anchor] with com.trueaccord.lenses.Updatable[open_anchor] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(txid.serializedSize) + txid.serializedSize
      __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(2, outputIndex)
      __size += com.google.protobuf.CodedOutputStream.computeUInt64Size(3, amount)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(commitSig.serializedSize) + commitSig.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(txid.serializedSize)
      txid.writeTo(output)
      output.writeUInt32(2, outputIndex)
      output.writeUInt64(3, amount)
      output.writeTag(4, 2)
      output.writeRawVarint32(commitSig.serializedSize)
      commitSig.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.open_anchor = {
      var __txid = this.txid
      var __outputIndex = this.outputIndex
      var __amount = this.amount
      var __commitSig = this.commitSig
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __txid = com.trueaccord.scalapb.LiteParser.readMessage(__input, __txid)
          case 16 =>
            __outputIndex = __input.readUInt32()
          case 24 =>
            __amount = __input.readUInt64()
          case 34 =>
            __commitSig = com.trueaccord.scalapb.LiteParser.readMessage(__input, __commitSig)
          case tag => __input.skipField(tag)
        }
      }
      lightning.open_anchor(
          txid = __txid,
          outputIndex = __outputIndex,
          amount = __amount,
          commitSig = __commitSig
      )
    }
    def withTxid(__v: lightning.sha256_hash): open_anchor = copy(txid = __v)
    def withOutputIndex(__v: Int): open_anchor = copy(outputIndex = __v)
    def withAmount(__v: Long): open_anchor = copy(amount = __v)
    def withCommitSig(__v: lightning.signature): open_anchor = copy(commitSig = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => txid
        case 2 => outputIndex
        case 3 => amount
        case 4 => commitSig
      }
    }
    def companion = lightning.open_anchor
}

object open_anchor extends com.trueaccord.scalapb.GeneratedMessageCompanion[open_anchor]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[open_anchor]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.open_anchor = lightning.open_anchor(
    txid = fieldsMap(1).asInstanceOf[lightning.sha256_hash],
    outputIndex = fieldsMap(2).asInstanceOf[Int],
    amount = fieldsMap(3).asInstanceOf[Long],
    commitSig = fieldsMap(4).asInstanceOf[lightning.signature]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("open_anchor", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.open_anchor"))
  lazy val defaultInstance = lightning.open_anchor(
    txid = lightning.sha256_hash.defaultInstance,
    outputIndex = 0,
    amount = 0L,
    commitSig = lightning.signature.defaultInstance
  )
  implicit class open_anchorLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, open_anchor]) extends com.trueaccord.lenses.ObjectLens[UpperPB, open_anchor](_l) {
    def txid: com.trueaccord.lenses.Lens[UpperPB, lightning.sha256_hash] = field(_.txid)((c_, f_) => c_.copy(txid = f_))
    def outputIndex: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.outputIndex)((c_, f_) => c_.copy(outputIndex = f_))
    def amount: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def commitSig: com.trueaccord.lenses.Lens[UpperPB, lightning.signature] = field(_.commitSig)((c_, f_) => c_.copy(commitSig = f_))
  }
  final val TXID_FIELD_NUMBER = 1
  final val OUTPUT_INDEX_FIELD_NUMBER = 2
  final val AMOUNT_FIELD_NUMBER = 3
  final val COMMIT_SIG_FIELD_NUMBER = 4
}
