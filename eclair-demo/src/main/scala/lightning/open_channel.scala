// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class open_channel(
    delay: lightning.locktime,
    revocationHash: lightning.sha256_hash,
    commitKey: lightning.bitcoin_pubkey,
    finalKey: lightning.bitcoin_pubkey,
    anch: lightning.open_channel.anchor_offer,
    minDepth: Option[Int] = None,
    commitmentFee: Long
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[open_channel] with com.trueaccord.lenses.Updatable[open_channel] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(delay.serializedSize) + delay.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(revocationHash.serializedSize) + revocationHash.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(commitKey.serializedSize) + commitKey.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(finalKey.serializedSize) + finalKey.serializedSize
      __size += com.google.protobuf.CodedOutputStream.computeEnumSize(6, anch.id)
      if (minDepth.isDefined) { __size += com.google.protobuf.CodedOutputStream.computeUInt32Size(7, minDepth.get) }
      __size += com.google.protobuf.CodedOutputStream.computeUInt64Size(8, commitmentFee)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(finalKey.serializedSize)
      finalKey.writeTo(output)
      output.writeTag(2, 2)
      output.writeRawVarint32(delay.serializedSize)
      delay.writeTo(output)
      output.writeTag(4, 2)
      output.writeRawVarint32(revocationHash.serializedSize)
      revocationHash.writeTo(output)
      output.writeTag(5, 2)
      output.writeRawVarint32(commitKey.serializedSize)
      commitKey.writeTo(output)
      output.writeEnum(6, anch.id)
      minDepth.foreach { v => 
        output.writeUInt32(7, v)
      }
      output.writeUInt64(8, commitmentFee)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.open_channel = {
      var __delay = this.delay
      var __revocationHash = this.revocationHash
      var __commitKey = this.commitKey
      var __finalKey = this.finalKey
      var __anch = this.anch
      var __minDepth = this.minDepth
      var __commitmentFee = this.commitmentFee
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 18 =>
            __delay = com.trueaccord.scalapb.LiteParser.readMessage(__input, __delay)
          case 34 =>
            __revocationHash = com.trueaccord.scalapb.LiteParser.readMessage(__input, __revocationHash)
          case 42 =>
            __commitKey = com.trueaccord.scalapb.LiteParser.readMessage(__input, __commitKey)
          case 10 =>
            __finalKey = com.trueaccord.scalapb.LiteParser.readMessage(__input, __finalKey)
          case 48 =>
            __anch = lightning.open_channel.anchor_offer.fromValue(__input.readEnum())
          case 56 =>
            __minDepth = Some(__input.readUInt32())
          case 64 =>
            __commitmentFee = __input.readUInt64()
          case tag => __input.skipField(tag)
        }
      }
      lightning.open_channel(
          delay = __delay,
          revocationHash = __revocationHash,
          commitKey = __commitKey,
          finalKey = __finalKey,
          anch = __anch,
          minDepth = __minDepth,
          commitmentFee = __commitmentFee
      )
    }
    def withDelay(__v: lightning.locktime): open_channel = copy(delay = __v)
    def withRevocationHash(__v: lightning.sha256_hash): open_channel = copy(revocationHash = __v)
    def withCommitKey(__v: lightning.bitcoin_pubkey): open_channel = copy(commitKey = __v)
    def withFinalKey(__v: lightning.bitcoin_pubkey): open_channel = copy(finalKey = __v)
    def withAnch(__v: lightning.open_channel.anchor_offer): open_channel = copy(anch = __v)
    def getMinDepth: Int = minDepth.getOrElse(0)
    def clearMinDepth: open_channel = copy(minDepth = None)
    def withMinDepth(__v: Int): open_channel = copy(minDepth = Some(__v))
    def withCommitmentFee(__v: Long): open_channel = copy(commitmentFee = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 2 => delay
        case 4 => revocationHash
        case 5 => commitKey
        case 1 => finalKey
        case 6 => anch
        case 7 => minDepth
        case 8 => commitmentFee
      }
    }
    def companion = lightning.open_channel
}

object open_channel extends com.trueaccord.scalapb.GeneratedMessageCompanion[open_channel]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[open_channel]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.open_channel = lightning.open_channel(
    delay = fieldsMap(2).asInstanceOf[lightning.locktime],
    revocationHash = fieldsMap(4).asInstanceOf[lightning.sha256_hash],
    commitKey = fieldsMap(5).asInstanceOf[lightning.bitcoin_pubkey],
    finalKey = fieldsMap(1).asInstanceOf[lightning.bitcoin_pubkey],
    anch = fieldsMap(6).asInstanceOf[lightning.open_channel.anchor_offer],
    minDepth = fieldsMap.getOrElse(7, None).asInstanceOf[Option[Int]],
    commitmentFee = fieldsMap(8).asInstanceOf[Long]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("open_channel", this,
    None, m = Seq(),
    e = Seq(lightning.open_channel.anchor_offer.descriptor),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.open_channel"))
  lazy val defaultInstance = lightning.open_channel(
    delay = lightning.locktime.defaultInstance,
    revocationHash = lightning.sha256_hash.defaultInstance,
    commitKey = lightning.bitcoin_pubkey.defaultInstance,
    finalKey = lightning.bitcoin_pubkey.defaultInstance,
    anch = lightning.open_channel.anchor_offer.WILL_CREATE_ANCHOR,
    commitmentFee = 0L
  )
  sealed trait anchor_offer extends com.trueaccord.scalapb.GeneratedEnum {
    def isWillCreateAnchor: Boolean = false
    def isWontCreateAnchor: Boolean = false
  }
  
  object anchor_offer extends com.trueaccord.scalapb.GeneratedEnumCompanion[anchor_offer] {
    @SerialVersionUID(0L)
    case object WILL_CREATE_ANCHOR extends anchor_offer {
      val id = 1
      val name = "WILL_CREATE_ANCHOR"
      override def isWillCreateAnchor: Boolean = true
    }
    
    @SerialVersionUID(0L)
    case object WONT_CREATE_ANCHOR extends anchor_offer {
      val id = 2
      val name = "WONT_CREATE_ANCHOR"
      override def isWontCreateAnchor: Boolean = true
    }
    
    lazy val values = Seq(WILL_CREATE_ANCHOR, WONT_CREATE_ANCHOR)
    def fromValue(value: Int): anchor_offer = value match {
      case 1 => WILL_CREATE_ANCHOR
      case 2 => WONT_CREATE_ANCHOR
    }
    lazy val descriptor = new Descriptors.EnumDescriptor(0, "anchor_offer", this)
  }
  implicit class open_channelLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, open_channel]) extends com.trueaccord.lenses.ObjectLens[UpperPB, open_channel](_l) {
    def delay: com.trueaccord.lenses.Lens[UpperPB, lightning.locktime] = field(_.delay)((c_, f_) => c_.copy(delay = f_))
    def revocationHash: com.trueaccord.lenses.Lens[UpperPB, lightning.sha256_hash] = field(_.revocationHash)((c_, f_) => c_.copy(revocationHash = f_))
    def commitKey: com.trueaccord.lenses.Lens[UpperPB, lightning.bitcoin_pubkey] = field(_.commitKey)((c_, f_) => c_.copy(commitKey = f_))
    def finalKey: com.trueaccord.lenses.Lens[UpperPB, lightning.bitcoin_pubkey] = field(_.finalKey)((c_, f_) => c_.copy(finalKey = f_))
    def anch: com.trueaccord.lenses.Lens[UpperPB, lightning.open_channel.anchor_offer] = field(_.anch)((c_, f_) => c_.copy(anch = f_))
    def minDepth: com.trueaccord.lenses.Lens[UpperPB, Int] = field(_.getMinDepth)((c_, f_) => c_.copy(minDepth = Some(f_)))
    def optionalMinDepth: com.trueaccord.lenses.Lens[UpperPB, Option[Int]] = field(_.minDepth)((c_, f_) => c_.copy(minDepth = f_))
    def commitmentFee: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.commitmentFee)((c_, f_) => c_.copy(commitmentFee = f_))
  }
  final val DELAY_FIELD_NUMBER = 2
  final val REVOCATION_HASH_FIELD_NUMBER = 4
  final val COMMIT_KEY_FIELD_NUMBER = 5
  final val FINAL_KEY_FIELD_NUMBER = 1
  final val ANCH_FIELD_NUMBER = 6
  final val MIN_DEPTH_FIELD_NUMBER = 7
  final val COMMITMENT_FEE_FIELD_NUMBER = 8
}
