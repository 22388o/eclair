// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class open_commit_sig(
    sig: lightning.signature
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[open_commit_sig] with com.trueaccord.lenses.Updatable[open_commit_sig] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(sig.serializedSize) + sig.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(sig.serializedSize)
      sig.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.open_commit_sig = {
      var __sig = this.sig
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __sig = com.trueaccord.scalapb.LiteParser.readMessage(__input, __sig)
          case tag => __input.skipField(tag)
        }
      }
      lightning.open_commit_sig(
          sig = __sig
      )
    }
    def withSig(__v: lightning.signature): open_commit_sig = copy(sig = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => sig
      }
    }
    def companion = lightning.open_commit_sig
}

object open_commit_sig extends com.trueaccord.scalapb.GeneratedMessageCompanion[open_commit_sig]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[open_commit_sig]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.open_commit_sig = lightning.open_commit_sig(
    sig = fieldsMap(1).asInstanceOf[lightning.signature]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("open_commit_sig", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.open_commit_sig"))
  lazy val defaultInstance = lightning.open_commit_sig(
    sig = lightning.signature.defaultInstance
  )
  implicit class open_commit_sigLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, open_commit_sig]) extends com.trueaccord.lenses.ObjectLens[UpperPB, open_commit_sig](_l) {
    def sig: com.trueaccord.lenses.Lens[UpperPB, lightning.signature] = field(_.sig)((c_, f_) => c_.copy(sig = f_))
  }
  final val SIG_FIELD_NUMBER = 1
}
