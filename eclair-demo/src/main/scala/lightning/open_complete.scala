// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class open_complete(
    blockid: Option[lightning.sha256_hash] = None
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[open_complete] with com.trueaccord.lenses.Updatable[open_complete] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (blockid.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(blockid.get.serializedSize) + blockid.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      blockid.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.open_complete = {
      var __blockid = this.blockid
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __blockid = Some(com.trueaccord.scalapb.LiteParser.readMessage(__input, __blockid.getOrElse(lightning.sha256_hash.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      lightning.open_complete(
          blockid = __blockid
      )
    }
    def getBlockid: lightning.sha256_hash = blockid.getOrElse(lightning.sha256_hash.defaultInstance)
    def clearBlockid: open_complete = copy(blockid = None)
    def withBlockid(__v: lightning.sha256_hash): open_complete = copy(blockid = Some(__v))
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => blockid
      }
    }
    def companion = lightning.open_complete
}

object open_complete extends com.trueaccord.scalapb.GeneratedMessageCompanion[open_complete]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[open_complete]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.open_complete = lightning.open_complete(
    blockid = fieldsMap.getOrElse(1, None).asInstanceOf[Option[lightning.sha256_hash]]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("open_complete", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.open_complete"))
  lazy val defaultInstance = lightning.open_complete(
  )
  implicit class open_completeLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, open_complete]) extends com.trueaccord.lenses.ObjectLens[UpperPB, open_complete](_l) {
    def blockid: com.trueaccord.lenses.Lens[UpperPB, lightning.sha256_hash] = field(_.getBlockid)((c_, f_) => c_.copy(blockid = Some(f_)))
    def optionalBlockid: com.trueaccord.lenses.Lens[UpperPB, Option[lightning.sha256_hash]] = field(_.blockid)((c_, f_) => c_.copy(blockid = f_))
  }
  final val BLOCKID_FIELD_NUMBER = 1
}
