// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class pkt(
    pkt: lightning.pkt.Pkt = lightning.pkt.Pkt.Empty
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[pkt] with com.trueaccord.lenses.Updatable[pkt] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      if (pkt.open.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.open.get.serializedSize) + pkt.open.get.serializedSize }
      if (pkt.openAnchor.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.openAnchor.get.serializedSize) + pkt.openAnchor.get.serializedSize }
      if (pkt.openCommitSig.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.openCommitSig.get.serializedSize) + pkt.openCommitSig.get.serializedSize }
      if (pkt.openComplete.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.openComplete.get.serializedSize) + pkt.openComplete.get.serializedSize }
      if (pkt.update.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.update.get.serializedSize) + pkt.update.get.serializedSize }
      if (pkt.updateAddHtlc.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateAddHtlc.get.serializedSize) + pkt.updateAddHtlc.get.serializedSize }
      if (pkt.updateAccept.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateAccept.get.serializedSize) + pkt.updateAccept.get.serializedSize }
      if (pkt.updateSignature.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateSignature.get.serializedSize) + pkt.updateSignature.get.serializedSize }
      if (pkt.updateComplete.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateComplete.get.serializedSize) + pkt.updateComplete.get.serializedSize }
      if (pkt.updateCompleteHtlc.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateCompleteHtlc.get.serializedSize) + pkt.updateCompleteHtlc.get.serializedSize }
      if (pkt.updateRemoveHtlc.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateRemoveHtlc.get.serializedSize) + pkt.updateRemoveHtlc.get.serializedSize }
      if (pkt.updateRemoveHtlcDelay.isDefined) { __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.updateRemoveHtlcDelay.get.serializedSize) + pkt.updateRemoveHtlcDelay.get.serializedSize }
      if (pkt.close.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.close.get.serializedSize) + pkt.close.get.serializedSize }
      if (pkt.closeComplete.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.closeComplete.get.serializedSize) + pkt.closeComplete.get.serializedSize }
      if (pkt.error.isDefined) { __size += 2 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(pkt.error.get.serializedSize) + pkt.error.get.serializedSize }
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      pkt.update.foreach { v => 
        output.writeTag(1, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateAddHtlc.foreach { v => 
        output.writeTag(2, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateAccept.foreach { v => 
        output.writeTag(3, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateSignature.foreach { v => 
        output.writeTag(4, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateComplete.foreach { v => 
        output.writeTag(5, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateCompleteHtlc.foreach { v => 
        output.writeTag(6, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateRemoveHtlc.foreach { v => 
        output.writeTag(7, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.updateRemoveHtlcDelay.foreach { v => 
        output.writeTag(8, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.open.foreach { v => 
        output.writeTag(201, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.openAnchor.foreach { v => 
        output.writeTag(202, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.openCommitSig.foreach { v => 
        output.writeTag(203, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.openComplete.foreach { v => 
        output.writeTag(204, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.close.foreach { v => 
        output.writeTag(401, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.closeComplete.foreach { v => 
        output.writeTag(402, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
      pkt.error.foreach { v => 
        output.writeTag(1000, 2)
        output.writeRawVarint32(v.serializedSize)
        v.writeTo(output)
      }
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.pkt = {
      var __pkt = this.pkt
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 1610 =>
            __pkt = lightning.pkt.Pkt.Open(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.open.getOrElse(lightning.open_channel.defaultInstance)))
          case 1618 =>
            __pkt = lightning.pkt.Pkt.OpenAnchor(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.openAnchor.getOrElse(lightning.open_anchor.defaultInstance)))
          case 1626 =>
            __pkt = lightning.pkt.Pkt.OpenCommitSig(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.openCommitSig.getOrElse(lightning.open_commit_sig.defaultInstance)))
          case 1634 =>
            __pkt = lightning.pkt.Pkt.OpenComplete(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.openComplete.getOrElse(lightning.open_complete.defaultInstance)))
          case 10 =>
            __pkt = lightning.pkt.Pkt.Update(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.update.getOrElse(lightning.update.defaultInstance)))
          case 18 =>
            __pkt = lightning.pkt.Pkt.UpdateAddHtlc(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateAddHtlc.getOrElse(lightning.update_add_htlc.defaultInstance)))
          case 26 =>
            __pkt = lightning.pkt.Pkt.UpdateAccept(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateAccept.getOrElse(lightning.update_accept.defaultInstance)))
          case 34 =>
            __pkt = lightning.pkt.Pkt.UpdateSignature(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateSignature.getOrElse(lightning.update_signature.defaultInstance)))
          case 42 =>
            __pkt = lightning.pkt.Pkt.UpdateComplete(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateComplete.getOrElse(lightning.update_complete.defaultInstance)))
          case 50 =>
            __pkt = lightning.pkt.Pkt.UpdateCompleteHtlc(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateCompleteHtlc.getOrElse(lightning.update_complete_htlc.defaultInstance)))
          case 58 =>
            __pkt = lightning.pkt.Pkt.UpdateRemoveHtlc(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateRemoveHtlc.getOrElse(lightning.update_remove_htlc.defaultInstance)))
          case 66 =>
            __pkt = lightning.pkt.Pkt.UpdateRemoveHtlcDelay(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.updateRemoveHtlcDelay.getOrElse(lightning.update_remove_htlc_delay.defaultInstance)))
          case 3210 =>
            __pkt = lightning.pkt.Pkt.Close(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.close.getOrElse(lightning.close_channel.defaultInstance)))
          case 3218 =>
            __pkt = lightning.pkt.Pkt.CloseComplete(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.closeComplete.getOrElse(lightning.close_channel_complete.defaultInstance)))
          case 8002 =>
            __pkt = lightning.pkt.Pkt.Error(com.trueaccord.scalapb.LiteParser.readMessage(__input, pkt.error.getOrElse(lightning.error.defaultInstance)))
          case tag => __input.skipField(tag)
        }
      }
      lightning.pkt(
          pkt = __pkt
      )
    }
    def getOpen: lightning.open_channel = pkt.open.getOrElse(lightning.open_channel.defaultInstance)
    def withOpen(__v: lightning.open_channel): pkt = copy(pkt = lightning.pkt.Pkt.Open(__v))
    def getOpenAnchor: lightning.open_anchor = pkt.openAnchor.getOrElse(lightning.open_anchor.defaultInstance)
    def withOpenAnchor(__v: lightning.open_anchor): pkt = copy(pkt = lightning.pkt.Pkt.OpenAnchor(__v))
    def getOpenCommitSig: lightning.open_commit_sig = pkt.openCommitSig.getOrElse(lightning.open_commit_sig.defaultInstance)
    def withOpenCommitSig(__v: lightning.open_commit_sig): pkt = copy(pkt = lightning.pkt.Pkt.OpenCommitSig(__v))
    def getOpenComplete: lightning.open_complete = pkt.openComplete.getOrElse(lightning.open_complete.defaultInstance)
    def withOpenComplete(__v: lightning.open_complete): pkt = copy(pkt = lightning.pkt.Pkt.OpenComplete(__v))
    def getUpdate: lightning.update = pkt.update.getOrElse(lightning.update.defaultInstance)
    def withUpdate(__v: lightning.update): pkt = copy(pkt = lightning.pkt.Pkt.Update(__v))
    def getUpdateAddHtlc: lightning.update_add_htlc = pkt.updateAddHtlc.getOrElse(lightning.update_add_htlc.defaultInstance)
    def withUpdateAddHtlc(__v: lightning.update_add_htlc): pkt = copy(pkt = lightning.pkt.Pkt.UpdateAddHtlc(__v))
    def getUpdateAccept: lightning.update_accept = pkt.updateAccept.getOrElse(lightning.update_accept.defaultInstance)
    def withUpdateAccept(__v: lightning.update_accept): pkt = copy(pkt = lightning.pkt.Pkt.UpdateAccept(__v))
    def getUpdateSignature: lightning.update_signature = pkt.updateSignature.getOrElse(lightning.update_signature.defaultInstance)
    def withUpdateSignature(__v: lightning.update_signature): pkt = copy(pkt = lightning.pkt.Pkt.UpdateSignature(__v))
    def getUpdateComplete: lightning.update_complete = pkt.updateComplete.getOrElse(lightning.update_complete.defaultInstance)
    def withUpdateComplete(__v: lightning.update_complete): pkt = copy(pkt = lightning.pkt.Pkt.UpdateComplete(__v))
    def getUpdateCompleteHtlc: lightning.update_complete_htlc = pkt.updateCompleteHtlc.getOrElse(lightning.update_complete_htlc.defaultInstance)
    def withUpdateCompleteHtlc(__v: lightning.update_complete_htlc): pkt = copy(pkt = lightning.pkt.Pkt.UpdateCompleteHtlc(__v))
    def getUpdateRemoveHtlc: lightning.update_remove_htlc = pkt.updateRemoveHtlc.getOrElse(lightning.update_remove_htlc.defaultInstance)
    def withUpdateRemoveHtlc(__v: lightning.update_remove_htlc): pkt = copy(pkt = lightning.pkt.Pkt.UpdateRemoveHtlc(__v))
    def getUpdateRemoveHtlcDelay: lightning.update_remove_htlc_delay = pkt.updateRemoveHtlcDelay.getOrElse(lightning.update_remove_htlc_delay.defaultInstance)
    def withUpdateRemoveHtlcDelay(__v: lightning.update_remove_htlc_delay): pkt = copy(pkt = lightning.pkt.Pkt.UpdateRemoveHtlcDelay(__v))
    def getClose: lightning.close_channel = pkt.close.getOrElse(lightning.close_channel.defaultInstance)
    def withClose(__v: lightning.close_channel): pkt = copy(pkt = lightning.pkt.Pkt.Close(__v))
    def getCloseComplete: lightning.close_channel_complete = pkt.closeComplete.getOrElse(lightning.close_channel_complete.defaultInstance)
    def withCloseComplete(__v: lightning.close_channel_complete): pkt = copy(pkt = lightning.pkt.Pkt.CloseComplete(__v))
    def getError: lightning.error = pkt.error.getOrElse(lightning.error.defaultInstance)
    def withError(__v: lightning.error): pkt = copy(pkt = lightning.pkt.Pkt.Error(__v))
    def clearPkt: pkt = copy(pkt = lightning.pkt.Pkt.Empty)
    def withPkt(__v: lightning.pkt.Pkt): pkt = copy(pkt = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 201 => pkt.open
        case 202 => pkt.openAnchor
        case 203 => pkt.openCommitSig
        case 204 => pkt.openComplete
        case 1 => pkt.update
        case 2 => pkt.updateAddHtlc
        case 3 => pkt.updateAccept
        case 4 => pkt.updateSignature
        case 5 => pkt.updateComplete
        case 6 => pkt.updateCompleteHtlc
        case 7 => pkt.updateRemoveHtlc
        case 8 => pkt.updateRemoveHtlcDelay
        case 401 => pkt.close
        case 402 => pkt.closeComplete
        case 1000 => pkt.error
      }
    }
    def companion = lightning.pkt
}

object pkt extends com.trueaccord.scalapb.GeneratedMessageCompanion[pkt]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[pkt]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.pkt = lightning.pkt(
    pkt = fieldsMap.getOrElse(201, None).asInstanceOf[Option[lightning.open_channel]].map(value => lightning.pkt.Pkt.Open(value)) orElse
fieldsMap.getOrElse(202, None).asInstanceOf[Option[lightning.open_anchor]].map(value => lightning.pkt.Pkt.OpenAnchor(value)) orElse
fieldsMap.getOrElse(203, None).asInstanceOf[Option[lightning.open_commit_sig]].map(value => lightning.pkt.Pkt.OpenCommitSig(value)) orElse
fieldsMap.getOrElse(204, None).asInstanceOf[Option[lightning.open_complete]].map(value => lightning.pkt.Pkt.OpenComplete(value)) orElse
fieldsMap.getOrElse(1, None).asInstanceOf[Option[lightning.update]].map(value => lightning.pkt.Pkt.Update(value)) orElse
fieldsMap.getOrElse(2, None).asInstanceOf[Option[lightning.update_add_htlc]].map(value => lightning.pkt.Pkt.UpdateAddHtlc(value)) orElse
fieldsMap.getOrElse(3, None).asInstanceOf[Option[lightning.update_accept]].map(value => lightning.pkt.Pkt.UpdateAccept(value)) orElse
fieldsMap.getOrElse(4, None).asInstanceOf[Option[lightning.update_signature]].map(value => lightning.pkt.Pkt.UpdateSignature(value)) orElse
fieldsMap.getOrElse(5, None).asInstanceOf[Option[lightning.update_complete]].map(value => lightning.pkt.Pkt.UpdateComplete(value)) orElse
fieldsMap.getOrElse(6, None).asInstanceOf[Option[lightning.update_complete_htlc]].map(value => lightning.pkt.Pkt.UpdateCompleteHtlc(value)) orElse
fieldsMap.getOrElse(7, None).asInstanceOf[Option[lightning.update_remove_htlc]].map(value => lightning.pkt.Pkt.UpdateRemoveHtlc(value)) orElse
fieldsMap.getOrElse(8, None).asInstanceOf[Option[lightning.update_remove_htlc_delay]].map(value => lightning.pkt.Pkt.UpdateRemoveHtlcDelay(value)) orElse
fieldsMap.getOrElse(401, None).asInstanceOf[Option[lightning.close_channel]].map(value => lightning.pkt.Pkt.Close(value)) orElse
fieldsMap.getOrElse(402, None).asInstanceOf[Option[lightning.close_channel_complete]].map(value => lightning.pkt.Pkt.CloseComplete(value)) orElse
fieldsMap.getOrElse(1000, None).asInstanceOf[Option[lightning.error]].map(value => lightning.pkt.Pkt.Error(value)) getOrElse lightning.pkt.Pkt.Empty
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("pkt", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.pkt"))
  lazy val defaultInstance = lightning.pkt(
  )
  sealed trait Pkt extends com.trueaccord.scalapb.GeneratedOneof {
    def isEmpty: Boolean = false
    def isDefined: Boolean = true
    def number: Int
    def isOpen: Boolean = false
    def isOpenAnchor: Boolean = false
    def isOpenCommitSig: Boolean = false
    def isOpenComplete: Boolean = false
    def isUpdate: Boolean = false
    def isUpdateAddHtlc: Boolean = false
    def isUpdateAccept: Boolean = false
    def isUpdateSignature: Boolean = false
    def isUpdateComplete: Boolean = false
    def isUpdateCompleteHtlc: Boolean = false
    def isUpdateRemoveHtlc: Boolean = false
    def isUpdateRemoveHtlcDelay: Boolean = false
    def isClose: Boolean = false
    def isCloseComplete: Boolean = false
    def isError: Boolean = false
    def open: Option[lightning.open_channel] = None
    def openAnchor: Option[lightning.open_anchor] = None
    def openCommitSig: Option[lightning.open_commit_sig] = None
    def openComplete: Option[lightning.open_complete] = None
    def update: Option[lightning.update] = None
    def updateAddHtlc: Option[lightning.update_add_htlc] = None
    def updateAccept: Option[lightning.update_accept] = None
    def updateSignature: Option[lightning.update_signature] = None
    def updateComplete: Option[lightning.update_complete] = None
    def updateCompleteHtlc: Option[lightning.update_complete_htlc] = None
    def updateRemoveHtlc: Option[lightning.update_remove_htlc] = None
    def updateRemoveHtlcDelay: Option[lightning.update_remove_htlc_delay] = None
    def close: Option[lightning.close_channel] = None
    def closeComplete: Option[lightning.close_channel_complete] = None
    def error: Option[lightning.error] = None
  }
  object Pkt extends {
    @SerialVersionUID(0L)
    case object Empty extends Pkt {
      override def isEmpty: Boolean = true
      override def isDefined: Boolean = false
      override def number: Int = 0
    }
  
    @SerialVersionUID(0L)
    case class Open(value: lightning.open_channel) extends Pkt {
      override def isOpen: Boolean = true
      override def open: Option[lightning.open_channel] = Some(value)
      override def number: Int = 201
    }
    @SerialVersionUID(0L)
    case class OpenAnchor(value: lightning.open_anchor) extends Pkt {
      override def isOpenAnchor: Boolean = true
      override def openAnchor: Option[lightning.open_anchor] = Some(value)
      override def number: Int = 202
    }
    @SerialVersionUID(0L)
    case class OpenCommitSig(value: lightning.open_commit_sig) extends Pkt {
      override def isOpenCommitSig: Boolean = true
      override def openCommitSig: Option[lightning.open_commit_sig] = Some(value)
      override def number: Int = 203
    }
    @SerialVersionUID(0L)
    case class OpenComplete(value: lightning.open_complete) extends Pkt {
      override def isOpenComplete: Boolean = true
      override def openComplete: Option[lightning.open_complete] = Some(value)
      override def number: Int = 204
    }
    @SerialVersionUID(0L)
    case class Update(value: lightning.update) extends Pkt {
      override def isUpdate: Boolean = true
      override def update: Option[lightning.update] = Some(value)
      override def number: Int = 1
    }
    @SerialVersionUID(0L)
    case class UpdateAddHtlc(value: lightning.update_add_htlc) extends Pkt {
      override def isUpdateAddHtlc: Boolean = true
      override def updateAddHtlc: Option[lightning.update_add_htlc] = Some(value)
      override def number: Int = 2
    }
    @SerialVersionUID(0L)
    case class UpdateAccept(value: lightning.update_accept) extends Pkt {
      override def isUpdateAccept: Boolean = true
      override def updateAccept: Option[lightning.update_accept] = Some(value)
      override def number: Int = 3
    }
    @SerialVersionUID(0L)
    case class UpdateSignature(value: lightning.update_signature) extends Pkt {
      override def isUpdateSignature: Boolean = true
      override def updateSignature: Option[lightning.update_signature] = Some(value)
      override def number: Int = 4
    }
    @SerialVersionUID(0L)
    case class UpdateComplete(value: lightning.update_complete) extends Pkt {
      override def isUpdateComplete: Boolean = true
      override def updateComplete: Option[lightning.update_complete] = Some(value)
      override def number: Int = 5
    }
    @SerialVersionUID(0L)
    case class UpdateCompleteHtlc(value: lightning.update_complete_htlc) extends Pkt {
      override def isUpdateCompleteHtlc: Boolean = true
      override def updateCompleteHtlc: Option[lightning.update_complete_htlc] = Some(value)
      override def number: Int = 6
    }
    @SerialVersionUID(0L)
    case class UpdateRemoveHtlc(value: lightning.update_remove_htlc) extends Pkt {
      override def isUpdateRemoveHtlc: Boolean = true
      override def updateRemoveHtlc: Option[lightning.update_remove_htlc] = Some(value)
      override def number: Int = 7
    }
    @SerialVersionUID(0L)
    case class UpdateRemoveHtlcDelay(value: lightning.update_remove_htlc_delay) extends Pkt {
      override def isUpdateRemoveHtlcDelay: Boolean = true
      override def updateRemoveHtlcDelay: Option[lightning.update_remove_htlc_delay] = Some(value)
      override def number: Int = 8
    }
    @SerialVersionUID(0L)
    case class Close(value: lightning.close_channel) extends Pkt {
      override def isClose: Boolean = true
      override def close: Option[lightning.close_channel] = Some(value)
      override def number: Int = 401
    }
    @SerialVersionUID(0L)
    case class CloseComplete(value: lightning.close_channel_complete) extends Pkt {
      override def isCloseComplete: Boolean = true
      override def closeComplete: Option[lightning.close_channel_complete] = Some(value)
      override def number: Int = 402
    }
    @SerialVersionUID(0L)
    case class Error(value: lightning.error) extends Pkt {
      override def isError: Boolean = true
      override def error: Option[lightning.error] = Some(value)
      override def number: Int = 1000
    }
  }
  implicit class pktLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, pkt]) extends com.trueaccord.lenses.ObjectLens[UpperPB, pkt](_l) {
    def open: com.trueaccord.lenses.Lens[UpperPB, lightning.open_channel] = field(_.getOpen)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.Open(f_)))
    def openAnchor: com.trueaccord.lenses.Lens[UpperPB, lightning.open_anchor] = field(_.getOpenAnchor)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.OpenAnchor(f_)))
    def openCommitSig: com.trueaccord.lenses.Lens[UpperPB, lightning.open_commit_sig] = field(_.getOpenCommitSig)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.OpenCommitSig(f_)))
    def openComplete: com.trueaccord.lenses.Lens[UpperPB, lightning.open_complete] = field(_.getOpenComplete)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.OpenComplete(f_)))
    def update: com.trueaccord.lenses.Lens[UpperPB, lightning.update] = field(_.getUpdate)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.Update(f_)))
    def updateAddHtlc: com.trueaccord.lenses.Lens[UpperPB, lightning.update_add_htlc] = field(_.getUpdateAddHtlc)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateAddHtlc(f_)))
    def updateAccept: com.trueaccord.lenses.Lens[UpperPB, lightning.update_accept] = field(_.getUpdateAccept)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateAccept(f_)))
    def updateSignature: com.trueaccord.lenses.Lens[UpperPB, lightning.update_signature] = field(_.getUpdateSignature)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateSignature(f_)))
    def updateComplete: com.trueaccord.lenses.Lens[UpperPB, lightning.update_complete] = field(_.getUpdateComplete)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateComplete(f_)))
    def updateCompleteHtlc: com.trueaccord.lenses.Lens[UpperPB, lightning.update_complete_htlc] = field(_.getUpdateCompleteHtlc)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateCompleteHtlc(f_)))
    def updateRemoveHtlc: com.trueaccord.lenses.Lens[UpperPB, lightning.update_remove_htlc] = field(_.getUpdateRemoveHtlc)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateRemoveHtlc(f_)))
    def updateRemoveHtlcDelay: com.trueaccord.lenses.Lens[UpperPB, lightning.update_remove_htlc_delay] = field(_.getUpdateRemoveHtlcDelay)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.UpdateRemoveHtlcDelay(f_)))
    def close: com.trueaccord.lenses.Lens[UpperPB, lightning.close_channel] = field(_.getClose)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.Close(f_)))
    def closeComplete: com.trueaccord.lenses.Lens[UpperPB, lightning.close_channel_complete] = field(_.getCloseComplete)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.CloseComplete(f_)))
    def error: com.trueaccord.lenses.Lens[UpperPB, lightning.error] = field(_.getError)((c_, f_) => c_.copy(pkt = lightning.pkt.Pkt.Error(f_)))
    def pkt: com.trueaccord.lenses.Lens[UpperPB, lightning.pkt.Pkt] = field(_.pkt)((c_, f_) => c_.copy(pkt = f_))
  }
  final val OPEN_FIELD_NUMBER = 201
  final val OPEN_ANCHOR_FIELD_NUMBER = 202
  final val OPEN_COMMIT_SIG_FIELD_NUMBER = 203
  final val OPEN_COMPLETE_FIELD_NUMBER = 204
  final val UPDATE_FIELD_NUMBER = 1
  final val UPDATE_ADD_HTLC_FIELD_NUMBER = 2
  final val UPDATE_ACCEPT_FIELD_NUMBER = 3
  final val UPDATE_SIGNATURE_FIELD_NUMBER = 4
  final val UPDATE_COMPLETE_FIELD_NUMBER = 5
  final val UPDATE_COMPLETE_HTLC_FIELD_NUMBER = 6
  final val UPDATE_REMOVE_HTLC_FIELD_NUMBER = 7
  final val UPDATE_REMOVE_HTLC_DELAY_FIELD_NUMBER = 8
  final val CLOSE_FIELD_NUMBER = 401
  final val CLOSE_COMPLETE_FIELD_NUMBER = 402
  final val ERROR_FIELD_NUMBER = 1000
}
