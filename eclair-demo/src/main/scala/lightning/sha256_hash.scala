// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class sha256_hash(
    a: Long,
    b: Long,
    c: Long,
    d: Long
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[sha256_hash] with com.trueaccord.lenses.Updatable[sha256_hash] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(1, a)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(2, b)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(3, c)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(4, d)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeFixed64(1, a)
      output.writeFixed64(2, b)
      output.writeFixed64(3, c)
      output.writeFixed64(4, d)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.sha256_hash = {
      var __a = this.a
      var __b = this.b
      var __c = this.c
      var __d = this.d
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __a = __input.readFixed64()
          case 17 =>
            __b = __input.readFixed64()
          case 25 =>
            __c = __input.readFixed64()
          case 33 =>
            __d = __input.readFixed64()
          case tag => __input.skipField(tag)
        }
      }
      lightning.sha256_hash(
          a = __a,
          b = __b,
          c = __c,
          d = __d
      )
    }
    def withA(__v: Long): sha256_hash = copy(a = __v)
    def withB(__v: Long): sha256_hash = copy(b = __v)
    def withC(__v: Long): sha256_hash = copy(c = __v)
    def withD(__v: Long): sha256_hash = copy(d = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => a
        case 2 => b
        case 3 => c
        case 4 => d
      }
    }
    def companion = lightning.sha256_hash
}

object sha256_hash extends com.trueaccord.scalapb.GeneratedMessageCompanion[sha256_hash]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[sha256_hash]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.sha256_hash = lightning.sha256_hash(
    a = fieldsMap(1).asInstanceOf[Long],
    b = fieldsMap(2).asInstanceOf[Long],
    c = fieldsMap(3).asInstanceOf[Long],
    d = fieldsMap(4).asInstanceOf[Long]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("sha256_hash", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.sha256_hash"))
  lazy val defaultInstance = lightning.sha256_hash(
    a = 0L,
    b = 0L,
    c = 0L,
    d = 0L
  )
  implicit class sha256_hashLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, sha256_hash]) extends com.trueaccord.lenses.ObjectLens[UpperPB, sha256_hash](_l) {
    def a: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.a)((c_, f_) => c_.copy(a = f_))
    def b: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.b)((c_, f_) => c_.copy(b = f_))
    def c: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.c)((c_, f_) => c_.copy(c = f_))
    def d: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.d)((c_, f_) => c_.copy(d = f_))
  }
  final val A_FIELD_NUMBER = 1
  final val B_FIELD_NUMBER = 2
  final val C_FIELD_NUMBER = 3
  final val D_FIELD_NUMBER = 4
}
