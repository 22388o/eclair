// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class signature(
    r1: Long,
    r2: Long,
    r3: Long,
    r4: Long,
    s1: Long,
    s2: Long,
    s3: Long,
    s4: Long
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[signature] with com.trueaccord.lenses.Updatable[signature] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(1, r1)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(2, r2)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(3, r3)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(4, r4)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(5, s1)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(6, s2)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(7, s3)
      __size += com.google.protobuf.CodedOutputStream.computeFixed64Size(8, s4)
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeFixed64(1, r1)
      output.writeFixed64(2, r2)
      output.writeFixed64(3, r3)
      output.writeFixed64(4, r4)
      output.writeFixed64(5, s1)
      output.writeFixed64(6, s2)
      output.writeFixed64(7, s3)
      output.writeFixed64(8, s4)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.signature = {
      var __r1 = this.r1
      var __r2 = this.r2
      var __r3 = this.r3
      var __r4 = this.r4
      var __s1 = this.s1
      var __s2 = this.s2
      var __s3 = this.s3
      var __s4 = this.s4
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 9 =>
            __r1 = __input.readFixed64()
          case 17 =>
            __r2 = __input.readFixed64()
          case 25 =>
            __r3 = __input.readFixed64()
          case 33 =>
            __r4 = __input.readFixed64()
          case 41 =>
            __s1 = __input.readFixed64()
          case 49 =>
            __s2 = __input.readFixed64()
          case 57 =>
            __s3 = __input.readFixed64()
          case 65 =>
            __s4 = __input.readFixed64()
          case tag => __input.skipField(tag)
        }
      }
      lightning.signature(
          r1 = __r1,
          r2 = __r2,
          r3 = __r3,
          r4 = __r4,
          s1 = __s1,
          s2 = __s2,
          s3 = __s3,
          s4 = __s4
      )
    }
    def withR1(__v: Long): signature = copy(r1 = __v)
    def withR2(__v: Long): signature = copy(r2 = __v)
    def withR3(__v: Long): signature = copy(r3 = __v)
    def withR4(__v: Long): signature = copy(r4 = __v)
    def withS1(__v: Long): signature = copy(s1 = __v)
    def withS2(__v: Long): signature = copy(s2 = __v)
    def withS3(__v: Long): signature = copy(s3 = __v)
    def withS4(__v: Long): signature = copy(s4 = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => r1
        case 2 => r2
        case 3 => r3
        case 4 => r4
        case 5 => s1
        case 6 => s2
        case 7 => s3
        case 8 => s4
      }
    }
    def companion = lightning.signature
}

object signature extends com.trueaccord.scalapb.GeneratedMessageCompanion[signature]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[signature]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.signature = lightning.signature(
    r1 = fieldsMap(1).asInstanceOf[Long],
    r2 = fieldsMap(2).asInstanceOf[Long],
    r3 = fieldsMap(3).asInstanceOf[Long],
    r4 = fieldsMap(4).asInstanceOf[Long],
    s1 = fieldsMap(5).asInstanceOf[Long],
    s2 = fieldsMap(6).asInstanceOf[Long],
    s3 = fieldsMap(7).asInstanceOf[Long],
    s4 = fieldsMap(8).asInstanceOf[Long]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("signature", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.signature"))
  lazy val defaultInstance = lightning.signature(
    r1 = 0L,
    r2 = 0L,
    r3 = 0L,
    r4 = 0L,
    s1 = 0L,
    s2 = 0L,
    s3 = 0L,
    s4 = 0L
  )
  implicit class signatureLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, signature]) extends com.trueaccord.lenses.ObjectLens[UpperPB, signature](_l) {
    def r1: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.r1)((c_, f_) => c_.copy(r1 = f_))
    def r2: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.r2)((c_, f_) => c_.copy(r2 = f_))
    def r3: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.r3)((c_, f_) => c_.copy(r3 = f_))
    def r4: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.r4)((c_, f_) => c_.copy(r4 = f_))
    def s1: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.s1)((c_, f_) => c_.copy(s1 = f_))
    def s2: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.s2)((c_, f_) => c_.copy(s2 = f_))
    def s3: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.s3)((c_, f_) => c_.copy(s3 = f_))
    def s4: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.s4)((c_, f_) => c_.copy(s4 = f_))
  }
  final val R1_FIELD_NUMBER = 1
  final val R2_FIELD_NUMBER = 2
  final val R3_FIELD_NUMBER = 3
  final val R4_FIELD_NUMBER = 4
  final val S1_FIELD_NUMBER = 5
  final val S2_FIELD_NUMBER = 6
  final val S3_FIELD_NUMBER = 7
  final val S4_FIELD_NUMBER = 8
}
