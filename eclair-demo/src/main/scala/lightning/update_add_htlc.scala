// Generated by the Scala Plugin for the Protocol Buffer Compiler.
// Do not edit!

package lightning


import com.trueaccord.scalapb.Descriptors

@SerialVersionUID(0L)
final case class update_add_htlc(
    revocationHash: lightning.sha256_hash,
    amount: Long,
    rHash: lightning.sha256_hash,
    expiry: lightning.locktime
    ) extends com.trueaccord.scalapb.GeneratedMessage with com.trueaccord.scalapb.Message[update_add_htlc] with com.trueaccord.lenses.Updatable[update_add_htlc] {
    @transient
    lazy val serializedSize: Int = {
      var __size = 0
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(revocationHash.serializedSize) + revocationHash.serializedSize
      __size += com.google.protobuf.CodedOutputStream.computeUInt64Size(2, amount)
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(rHash.serializedSize) + rHash.serializedSize
      __size += 1 + com.google.protobuf.CodedOutputStream.computeRawVarint32Size(expiry.serializedSize) + expiry.serializedSize
      __size
    }
    def writeTo(output: com.google.protobuf.CodedOutputStream): Unit = {
      output.writeTag(1, 2)
      output.writeRawVarint32(revocationHash.serializedSize)
      revocationHash.writeTo(output)
      output.writeUInt64(2, amount)
      output.writeTag(3, 2)
      output.writeRawVarint32(rHash.serializedSize)
      rHash.writeTo(output)
      output.writeTag(4, 2)
      output.writeRawVarint32(expiry.serializedSize)
      expiry.writeTo(output)
    }
    def mergeFrom(__input: com.google.protobuf.CodedInputStream): lightning.update_add_htlc = {
      var __revocationHash = this.revocationHash
      var __amount = this.amount
      var __rHash = this.rHash
      var __expiry = this.expiry
      var _done__ = false
      while (!_done__) {
        val _tag__ = __input.readTag()
        _tag__ match {
          case 0 => _done__ = true
          case 10 =>
            __revocationHash = com.trueaccord.scalapb.LiteParser.readMessage(__input, __revocationHash)
          case 16 =>
            __amount = __input.readUInt64()
          case 26 =>
            __rHash = com.trueaccord.scalapb.LiteParser.readMessage(__input, __rHash)
          case 34 =>
            __expiry = com.trueaccord.scalapb.LiteParser.readMessage(__input, __expiry)
          case tag => __input.skipField(tag)
        }
      }
      lightning.update_add_htlc(
          revocationHash = __revocationHash,
          amount = __amount,
          rHash = __rHash,
          expiry = __expiry
      )
    }
    def withRevocationHash(__v: lightning.sha256_hash): update_add_htlc = copy(revocationHash = __v)
    def withAmount(__v: Long): update_add_htlc = copy(amount = __v)
    def withRHash(__v: lightning.sha256_hash): update_add_htlc = copy(rHash = __v)
    def withExpiry(__v: lightning.locktime): update_add_htlc = copy(expiry = __v)
    def getField(__field: Descriptors.FieldDescriptor): Any = {
      __field.number match {
        case 1 => revocationHash
        case 2 => amount
        case 3 => rHash
        case 4 => expiry
      }
    }
    def companion = lightning.update_add_htlc
}

object update_add_htlc extends com.trueaccord.scalapb.GeneratedMessageCompanion[update_add_htlc]  {
  implicit def messageCompanion: com.trueaccord.scalapb.GeneratedMessageCompanion[update_add_htlc]  = this
  def fromFieldsMap(fieldsMap: Map[Int, Any]): lightning.update_add_htlc = lightning.update_add_htlc(
    revocationHash = fieldsMap(1).asInstanceOf[lightning.sha256_hash],
    amount = fieldsMap(2).asInstanceOf[Long],
    rHash = fieldsMap(3).asInstanceOf[lightning.sha256_hash],
    expiry = fieldsMap(4).asInstanceOf[lightning.locktime]
  )
  lazy val descriptor = new Descriptors.MessageDescriptor("update_add_htlc", this,
    None, m = Seq(),
    e = Seq(),
    f = lightning.InternalFields_srcMainProtobufLightningProto.internalFieldsFor("lightning.update_add_htlc"))
  lazy val defaultInstance = lightning.update_add_htlc(
    revocationHash = lightning.sha256_hash.defaultInstance,
    amount = 0L,
    rHash = lightning.sha256_hash.defaultInstance,
    expiry = lightning.locktime.defaultInstance
  )
  implicit class update_add_htlcLens[UpperPB](_l: com.trueaccord.lenses.Lens[UpperPB, update_add_htlc]) extends com.trueaccord.lenses.ObjectLens[UpperPB, update_add_htlc](_l) {
    def revocationHash: com.trueaccord.lenses.Lens[UpperPB, lightning.sha256_hash] = field(_.revocationHash)((c_, f_) => c_.copy(revocationHash = f_))
    def amount: com.trueaccord.lenses.Lens[UpperPB, Long] = field(_.amount)((c_, f_) => c_.copy(amount = f_))
    def rHash: com.trueaccord.lenses.Lens[UpperPB, lightning.sha256_hash] = field(_.rHash)((c_, f_) => c_.copy(rHash = f_))
    def expiry: com.trueaccord.lenses.Lens[UpperPB, lightning.locktime] = field(_.expiry)((c_, f_) => c_.copy(expiry = f_))
  }
  final val REVOCATION_HASH_FIELD_NUMBER = 1
  final val AMOUNT_FIELD_NUMBER = 2
  final val R_HASH_FIELD_NUMBER = 3
  final val EXPIRY_FIELD_NUMBER = 4
}
